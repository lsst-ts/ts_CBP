.. _Developer_Guide:

###################
CBP Developer Guide
###################

The CBP software consists of a typical salobj CSC, a firmware written in DMC and a TCP/IP socket controller written in python.

.. glossary::

    DMC
        A language based on C for writing Galil motion control firmware logic.


.. _Dependencies:

Dependencies
============

* `SAL <https://ts-sal.lsst.io>`_ - v4.0.0
* `ts_salobj <https://ts-salobj.lsst.io>`_ - v5.x.0

.. _API:

CBP API
=======

The content in this section is autogenerated from docstrings.

.. automodapi:: lsst.ts.cbp
    :no-main-docstr:
    :no-inheritance-diagram:

.. _Build:

Build and Test
==============

.. prompt:: bash

    pip install -e .[dev]
    # Make sure environment variable TS_CONFIG_MTCALSYS_DIR points to the ts_config_mtcalsys package
    export TS_CONFIG_MTCALSYS_DIR=/home/saluser/repos/ts_config_mtcalsys
    pytest --cov lsst.ts.cbp -ra


.. _Usage:

Usage
=====

Starting the CSC.

.. code::

    run_cbp.py

Stopping the CSC.

.. code::

    await cbp.cmd_exitControl.set_start(timeout=10)

.. _Simulator:

Simulator
=========

The simulator is written using `lewis <https://lewis.readthedocs.io/en/latest/index.html>`_.
The code for the simulator is located in the ``simulator`` folder of the ``cbp`` package.
It is divided into two areas ``devices`` and ``interfaces``.
The ``device`` and ``state`` module contain the logic for the state machine as ``lewis`` is a cycle and state based framework.
The ``cbp_stream`` module provides the tcp/ip commands interface for the simulator.

.. prompt:: bash

    pip install -U scanf
    export TS_CONFIG_MTCALSYS_DIR=/home/saluser/develop/ts_config_mtcalsys

Starting the simulator

.. prompt:: bash

    lewis -k lsst.ts.cbp simulator
    
:kbd:`ctrl+c` to exit the simulator.

This simulator does not have the park mode implemented yet.
Limits have not been added, but the component code checks the limits anyway.


.. _Firmware:

Updating Firmware of the CBP
============================

1. Download ``Galil Design Kit``
2. Edit dmc code
3. Click Download program to hardware


.. _Documentation:

Building the Documentation
==========================

.. prompt:: bash

    pip install -e .[dev]
    package-docs clean && package-docs build
    # files located in doc/_build/html/ directory


.. _Contributing:

Contributing
============

Code and documentation contributions utilize pull-requests on GitHub.
Feature requests can be made by filing a Jira ticket with the ``ts_CBP`` label in the Data Management(DM) project.
In all cases, reaching out to the :ref:`contacts for this CSC <ts_xml:index:master-csc-table:CBP>` is recommended.

